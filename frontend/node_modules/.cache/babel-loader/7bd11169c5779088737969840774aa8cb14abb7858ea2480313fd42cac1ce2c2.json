{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport TriggerButton from './trigger-button';\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nexport function DrawerTriggers({\n  ariaLabels,\n  activeDrawerId,\n  drawers,\n  drawersFocusRef,\n  onActiveDrawerChange,\n  splitPanelOpen,\n  splitPanelPosition = 'bottom',\n  splitPanelFocusRef,\n  splitPanelToggleProps,\n  onSplitPanelToggle,\n  disabled,\n  activeGlobalDrawersIds,\n  globalDrawers,\n  globalDrawersFocusControl,\n  onActiveGlobalDrawersChange\n}) {\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n  const previousActiveLocalDrawerId = useRef(activeDrawerId);\n  const previousActiveGlobalDrawersIds = useRef(activeGlobalDrawersIds);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {\n    return null;\n  }\n  if (activeDrawerId) {\n    previousActiveLocalDrawerId.current = activeDrawerId;\n  }\n  if (activeGlobalDrawersIds.length) {\n    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;\n  }\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n  const indexOfOverflowItem = getIndexOfOverflowItem();\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems([...drawers, ...globalDrawers], indexOfOverflowItem, activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const globalDrawersStartIndex = drawers.length;\n  const hasOpenDrawer = !!activeDrawerId || splitPanelPosition === 'side' && splitPanelOpen;\n  const splitPanelResolvedPosition = splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.position;\n  return React.createElement(\"aside\", {\n    className: styles[`drawers-${isMobile ? 'mobile' : 'desktop'}-triggers-container`],\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers,\n    ref: triggersContainerRef,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: styles['drawers-trigger-content'],\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, splitPanelToggleProps && React.createElement(React.Fragment, null, React.createElement(TriggerButton, {\n    ariaLabel: splitPanelToggleProps.ariaLabel,\n    ariaControls: splitPanelToggleProps.controlId,\n    ariaExpanded: splitPanelToggleProps.active,\n    className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], splitPanelTestUtilStyles['open-button']),\n    iconName: splitPanelResolvedPosition === 'side' ? 'view-vertical' : 'view-horizontal',\n    onClick: () => onSplitPanelToggle === null || onSplitPanelToggle === void 0 ? void 0 : onSplitPanelToggle(),\n    selected: splitPanelToggleProps.active,\n    ref: splitPanelResolvedPosition === 'side' ? splitPanelFocusRef : undefined,\n    hasTooltip: true,\n    isMobile: isMobile,\n    isForSplitPanel: true,\n    disabled: disabled\n  }), hasMultipleTriggers ? React.createElement(\"div\", {\n    className: styles['group-divider']\n  }) : null), visibleItems.slice(0, globalDrawersStartIndex).map(item => {\n    var _a, _b;\n    const isForPreviousActiveDrawer = (previousActiveLocalDrawerId === null || previousActiveLocalDrawerId === void 0 ? void 0 : previousActiveLocalDrawerId.current) === item.id;\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: item.id === activeDrawerId,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], !toolsOnlyMode && testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(activeDrawerId !== item.id ? item.id : null, {\n        initiatedByUserAction: true\n      }),\n      ref: item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : undefined,\n      selected: item.id === activeDrawerId,\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`,\n      hasTooltip: true,\n      hasOpenDrawer: hasOpenDrawer,\n      tooltipText: (_b = item.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName,\n      isForPreviousActiveDrawer: isForPreviousActiveDrawer,\n      isMobile: isMobile,\n      disabled: disabled\n    });\n  }), globalDrawersStartIndex > 0 && visibleItems.length > globalDrawersStartIndex && React.createElement(\"div\", {\n    className: styles['group-divider']\n  }), visibleItems.slice(globalDrawersStartIndex).map(item => {\n    var _a, _b, _c;\n    const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds === null || previousActiveGlobalDrawersIds === void 0 ? void 0 : previousActiveGlobalDrawersIds.current.includes(item.id);\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: activeGlobalDrawersIds.includes(item.id),\n      ariaControls: activeGlobalDrawersIds.includes(item.id) ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testutilStyles['drawers-trigger-global']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => {\n        onActiveGlobalDrawersChange && onActiveGlobalDrawersChange(item.id, {\n          initiatedByUserAction: true\n        });\n      },\n      ref: (_b = globalDrawersFocusControl === null || globalDrawersFocusControl === void 0 ? void 0 : globalDrawersFocusControl.refs[item.id]) === null || _b === void 0 ? void 0 : _b.toggle,\n      selected: activeGlobalDrawersIds.includes(item.id),\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`,\n      hasTooltip: true,\n      hasOpenDrawer: hasOpenDrawer,\n      tooltipText: (_c = item.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName,\n      isForPreviousActiveDrawer: isForPreviousActiveDrawer,\n      isMobile: isMobile,\n      disabled: disabled\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems.map(item => Object.assign(Object.assign({}, item), {\n      active: activeGlobalDrawersIds.includes(item.id)\n    })),\n    ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow,\n    customTriggerBuilder: ({\n      onClick,\n      triggerRef,\n      ariaLabel,\n      ariaExpanded,\n      testUtilsClass\n    }) => {\n      return React.createElement(TriggerButton, {\n        ref: triggerRef,\n        ariaLabel: ariaLabel,\n        ariaExpanded: ariaExpanded,\n        badge: overflowMenuHasBadge,\n        className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testutilStyles['drawers-trigger-global'], testUtilsClass),\n        iconName: \"ellipsis\",\n        onClick: onClick,\n        disabled: disabled\n      });\n    },\n    onItemClick: event => {\n      const id = event.detail.id;\n      if (globalDrawers.find(drawer => drawer.id === id)) {\n        onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(id, {\n          initiatedByUserAction: true\n        });\n      } else {\n        onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(event.detail.id, {\n          initiatedByUserAction: true\n        });\n      }\n    },\n    globalDrawersStartIndex: globalDrawersStartIndex - indexOfOverflowItem\n  })));\n}","map":{"version":3,"names":["React","useRef","clsx","useContainerQuery","useMobile","splitItems","OverflowMenu","TOOLS_DRAWER_ID","TriggerButton","splitPanelTestUtilStyles","testutilStyles","styles","DrawerTriggers","ariaLabels","activeDrawerId","drawers","drawersFocusRef","onActiveDrawerChange","splitPanelOpen","splitPanelPosition","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","disabled","activeGlobalDrawersIds","globalDrawers","globalDrawersFocusControl","onActiveGlobalDrawersChange","isMobile","hasMultipleTriggers","length","previousActiveLocalDrawerId","previousActiveGlobalDrawersIds","containerWidth","triggersContainerRef","rect","contentBoxWidth","current","getIndexOfOverflowItem","ITEM_WIDTH","overflowSpot","index","Math","floor","splitPanelItem","indexOfOverflowItem","visibleItems","overflowItems","overflowMenuHasBadge","find","item","badge","toolsOnlyMode","id","globalDrawersStartIndex","hasOpenDrawer","splitPanelResolvedPosition","position","createElement","className","ref","role","Fragment","ariaLabel","ariaControls","controlId","ariaExpanded","active","iconName","onClick","selected","undefined","hasTooltip","isForSplitPanel","slice","map","isForPreviousActiveDrawer","_a","triggerButton","trigger","iconSvg","key","initiatedByUserAction","testId","tooltipText","_b","drawerName","includes","refs","toggle","_c","items","Object","assign","drawersOverflowWithBadge","drawersOverflow","customTriggerBuilder","triggerRef","testUtilsClass","onItemClick","event","detail","drawer"],"sources":["C:\\Users\\tanne\\Desktop\\Bright Path Analytics\\Education-Planning-Assistant-App\\frontend\\node_modules\\src\\app-layout\\visual-refresh-toolbar\\toolbar\\drawer-triggers.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../../interfaces';\nimport { OnChangeParams, TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport { Focusable, FocusControlMultipleStates } from '../../utils/use-focus-control';\nimport TriggerButton from './trigger-button';\n\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport interface SplitPanelToggleProps {\n  displayed: boolean;\n  ariaLabel: string | undefined;\n  controlId: string | undefined;\n  active: boolean;\n  position: AppLayoutProps.SplitPanelPosition;\n}\n\ninterface DrawerTriggersProps {\n  ariaLabels: AppLayoutPropsWithDefaults['ariaLabels'];\n\n  activeDrawerId: string | null;\n  drawersFocusRef: React.Ref<Focusable> | undefined;\n  drawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveDrawerChange: ((drawerId: string | null, params: OnChangeParams) => void) | undefined;\n\n  activeGlobalDrawersIds: ReadonlyArray<string>;\n  globalDrawersFocusControl?: FocusControlMultipleStates;\n  globalDrawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveGlobalDrawersChange?: (newDrawerId: string, params: OnChangeParams) => void;\n\n  splitPanelOpen?: boolean;\n  splitPanelPosition?: AppLayoutProps.SplitPanelPreferences['position'];\n  splitPanelToggleProps: SplitPanelToggleProps | undefined;\n  splitPanelFocusRef: React.Ref<Focusable> | undefined;\n  onSplitPanelToggle: (() => void) | undefined;\n  disabled: boolean;\n}\n\nexport function DrawerTriggers({\n  ariaLabels,\n  activeDrawerId,\n  drawers,\n  drawersFocusRef,\n  onActiveDrawerChange,\n  splitPanelOpen,\n  splitPanelPosition = 'bottom',\n  splitPanelFocusRef,\n  splitPanelToggleProps,\n  onSplitPanelToggle,\n  disabled,\n  activeGlobalDrawersIds,\n  globalDrawers,\n  globalDrawersFocusControl,\n  onActiveGlobalDrawersChange,\n}: DrawerTriggersProps) {\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n  const previousActiveLocalDrawerId = useRef(activeDrawerId);\n  const previousActiveGlobalDrawersIds = useRef(activeGlobalDrawersIds);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveLocalDrawerId.current = activeDrawerId;\n  }\n\n  if (activeGlobalDrawersIds.length) {\n    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;\n  }\n\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n\n  const indexOfOverflowItem = getIndexOfOverflowItem();\n\n  const { visibleItems, overflowItems } = splitItems(\n    [...drawers, ...globalDrawers],\n    indexOfOverflowItem,\n    activeDrawerId ?? null\n  );\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const globalDrawersStartIndex = drawers.length;\n  const hasOpenDrawer = !!activeDrawerId || (splitPanelPosition === 'side' && splitPanelOpen);\n  const splitPanelResolvedPosition = splitPanelToggleProps?.position;\n\n  return (\n    <aside\n      className={styles[`drawers-${isMobile ? 'mobile' : 'desktop'}-triggers-container`]}\n      aria-label={ariaLabels?.drawers}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div className={styles['drawers-trigger-content']} role=\"toolbar\" aria-orientation=\"horizontal\">\n        {splitPanelToggleProps && (\n          <>\n            <TriggerButton\n              ariaLabel={splitPanelToggleProps.ariaLabel}\n              ariaControls={splitPanelToggleProps.controlId}\n              ariaExpanded={splitPanelToggleProps.active}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                splitPanelTestUtilStyles['open-button']\n              )}\n              iconName={splitPanelResolvedPosition === 'side' ? 'view-vertical' : 'view-horizontal'}\n              onClick={() => onSplitPanelToggle?.()}\n              selected={splitPanelToggleProps.active}\n              ref={splitPanelResolvedPosition === 'side' ? splitPanelFocusRef : undefined}\n              hasTooltip={true}\n              isMobile={isMobile}\n              isForSplitPanel={true}\n              disabled={disabled}\n            />\n            {hasMultipleTriggers ? <div className={styles['group-divider']}></div> : null}\n          </>\n        )}\n        {visibleItems.slice(0, globalDrawersStartIndex).map(item => {\n          const isForPreviousActiveDrawer = previousActiveLocalDrawerId?.current === item.id;\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={item.id === activeDrawerId}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                !toolsOnlyMode && testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger!.iconName}\n              iconSvg={item.trigger!.iconSvg}\n              key={item.id}\n              onClick={() =>\n                onActiveDrawerChange?.(activeDrawerId !== item.id ? item.id : null, { initiatedByUserAction: true })\n              }\n              ref={item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : undefined}\n              selected={item.id === activeDrawerId}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              hasTooltip={true}\n              hasOpenDrawer={hasOpenDrawer}\n              tooltipText={item.ariaLabels?.drawerName}\n              isForPreviousActiveDrawer={isForPreviousActiveDrawer}\n              isMobile={isMobile}\n              disabled={disabled}\n            />\n          );\n        })}\n        {globalDrawersStartIndex > 0 && visibleItems.length > globalDrawersStartIndex && (\n          <div className={styles['group-divider']}></div>\n        )}\n        {visibleItems.slice(globalDrawersStartIndex).map(item => {\n          const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds?.current.includes(item.id);\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={activeGlobalDrawersIds.includes(item.id)}\n              ariaControls={activeGlobalDrawersIds.includes(item.id) ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                testutilStyles['drawers-trigger-global']\n              )}\n              iconName={item.trigger!.iconName}\n              iconSvg={item.trigger!.iconSvg}\n              key={item.id}\n              onClick={() => {\n                onActiveGlobalDrawersChange && onActiveGlobalDrawersChange(item.id, { initiatedByUserAction: true });\n              }}\n              ref={globalDrawersFocusControl?.refs[item.id]?.toggle}\n              selected={activeGlobalDrawersIds.includes(item.id)}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              hasTooltip={true}\n              hasOpenDrawer={hasOpenDrawer}\n              tooltipText={item.ariaLabels?.drawerName}\n              isForPreviousActiveDrawer={isForPreviousActiveDrawer}\n              isMobile={isMobile}\n              disabled={disabled}\n            />\n          );\n        })}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems.map(item => ({\n              ...item,\n              active: activeGlobalDrawersIds.includes(item.id),\n            }))}\n            ariaLabel={overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => {\n              return (\n                <TriggerButton\n                  ref={triggerRef}\n                  ariaLabel={ariaLabel}\n                  ariaExpanded={ariaExpanded}\n                  badge={overflowMenuHasBadge}\n                  className={clsx(\n                    styles['drawers-trigger'],\n                    testutilStyles['drawers-trigger'],\n                    testutilStyles['drawers-trigger-global'],\n                    testUtilsClass\n                  )}\n                  iconName=\"ellipsis\"\n                  onClick={onClick}\n                  disabled={disabled}\n                />\n              );\n            }}\n            onItemClick={event => {\n              const id = event.detail.id;\n              if (globalDrawers.find(drawer => drawer.id === id)) {\n                onActiveGlobalDrawersChange?.(id, { initiatedByUserAction: true });\n              } else {\n                onActiveDrawerChange?.(event.detail.id, { initiatedByUserAction: true });\n              }\n            }}\n            globalDrawersStartIndex={globalDrawersStartIndex - indexOfOverflowItem}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}