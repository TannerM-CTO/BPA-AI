{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport InternalIcon from '../../../icon/internal';\nimport styles from './styles.css.js';\nexport default function DragHandle({\n  ariaLabel,\n  ariaDescribedby,\n  disabled,\n  onPointerDown,\n  onKeyDown\n}) {\n  return (\n    // We need to use a div with button role instead of a button\n    // so that Safari will focus on it when clicking it.\n    // (See https://bugs.webkit.org/show_bug.cgi?id=22261)\n    // Otherwise, we can't reliably catch keyboard events coming from the handle\n    // when it is being dragged.\n    React.createElement(\"div\", {\n      role: \"button\",\n      tabIndex: 0,\n      className: clsx(styles.handle, disabled && styles['handle-disabled']),\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescribedby,\n      \"aria-disabled\": disabled,\n      onPointerDown: onPointerDown,\n      onKeyDown: onKeyDown\n    }, React.createElement(InternalIcon, {\n      variant: disabled ? 'disabled' : undefined,\n      name: \"drag-indicator\"\n    }))\n  );\n}","map":{"version":3,"names":["React","clsx","InternalIcon","styles","DragHandle","ariaLabel","ariaDescribedby","disabled","onPointerDown","onKeyDown","createElement","role","tabIndex","className","handle","variant","undefined","name"],"sources":["C:\\Users\\tanne\\Desktop\\Bright Path Analytics\\Education-Planning-Assistant-App\\frontend\\node_modules\\src\\internal\\components\\drag-handle\\index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport InternalIcon from '../../../icon/internal';\n\nimport styles from './styles.css.js';\n\nexport interface DragHandleProps {\n  ariaLabel: string;\n  ariaDescribedby?: string;\n  disabled?: boolean;\n  onPointerDown?: React.PointerEventHandler;\n  onKeyDown?: React.KeyboardEventHandler;\n}\n\nexport default function DragHandle({\n  ariaLabel,\n  ariaDescribedby,\n  disabled,\n  onPointerDown,\n  onKeyDown,\n}: DragHandleProps) {\n  return (\n    // We need to use a div with button role instead of a button\n    // so that Safari will focus on it when clicking it.\n    // (See https://bugs.webkit.org/show_bug.cgi?id=22261)\n    // Otherwise, we can't reliably catch keyboard events coming from the handle\n    // when it is being dragged.\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={clsx(styles.handle, disabled && styles['handle-disabled'])}\n      aria-label={ariaLabel}\n      aria-describedby={ariaDescribedby}\n      aria-disabled={disabled}\n      onPointerDown={onPointerDown}\n      onKeyDown={onKeyDown}\n    >\n      <InternalIcon variant={disabled ? 'disabled' : undefined} name=\"drag-indicator\" />\n    </div>\n  );\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,OAAOC,YAAY,MAAM,wBAAwB;AAEjD,OAAOC,MAAM,MAAM,iBAAiB;AAUpC,eAAc,SAAUC,UAAUA,CAAC;EACjCC,SAAS;EACTC,eAAe;EACfC,QAAQ;EACRC,aAAa;EACbC;AAAS,CACO;EAChB;IACE;IACA;IACA;IACA;IACA;IACAT,KAAA,CAAAU,aAAA;MACEC,IAAI,EAAC,QAAQ;MACbC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAEZ,IAAI,CAACE,MAAM,CAACW,MAAM,EAAEP,QAAQ,IAAIJ,MAAM,CAAC,iBAAiB,CAAC,CAAC;MAAA,cACzDE,SAAS;MAAA,oBACHC,eAAe;MAAA,iBAClBC,QAAQ;MACvBC,aAAa,EAAEA,aAAa;MAC5BC,SAAS,EAAEA;IAAS,GAEpBT,KAAA,CAAAU,aAAA,CAACR,YAAY;MAACa,OAAO,EAAER,QAAQ,GAAG,UAAU,GAAGS,SAAS;MAAEC,IAAI,EAAC;IAAgB,EAAG;EAC9E;AAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}