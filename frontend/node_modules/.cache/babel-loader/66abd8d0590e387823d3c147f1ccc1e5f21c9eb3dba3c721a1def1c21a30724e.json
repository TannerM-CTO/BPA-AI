{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport { DndArea } from '../../internal/components/dnd-area';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport ContentDisplayOption, { getClassName as getOptionClassName } from './content-display-option';\nimport { getFilteredOptions, getSortedOptions } from './utils';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display';\nconst getClassName = suffix => styles[`${componentPrefix}-${suffix}`];\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({\n    id\n  }) => ({\n    id,\n    visible: true\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings\n}) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({\n      options,\n      contentDisplay: value\n    });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n  const onToggle = option => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({\n      id,\n      visible\n    }) => ({\n      id,\n      visible: id === option.id ? !option.visible : visible\n    })));\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: styles[componentPrefix]\n  }, getAnalyticsInnerContextAttribute('contentDisplay')), React.createElement(\"h3\", {\n    className: getClassName('title'),\n    id: titleId\n  }, i18n('contentDisplayPreference.title', title)), React.createElement(\"p\", {\n    className: getClassName('description'),\n    id: descriptionId\n  }, i18n('contentDisplayPreference.description', description)), enableColumnFiltering && React.createElement(\"div\", {\n    className: getClassName('text-filter')\n  }, React.createElement(InternalTextFilter, {\n    filteringText: columnFilteringText,\n    filteringPlaceholder: i18n('contentDisplayPreference.i18nStrings.columnFilteringPlaceholder', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringPlaceholder),\n    filteringAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringAriaLabel),\n    filteringClearAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText),\n    onChange: ({\n      detail\n    }) => setColumnFilteringText(detail.filteringText),\n    countText: i18n('contentDisplayPreference.i18nStrings.columnFilteringCountText', (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText) ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText(sortedAndFilteredOptions.length) : undefined, format => format({\n      count: sortedAndFilteredOptions.length\n    }))\n  })), sortedAndFilteredOptions.length === 0 && React.createElement(\"div\", {\n    className: getClassName('no-match')\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"s\",\n    alignItems: \"center\"\n  }, React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringNoMatchText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringNoMatchText)), React.createElement(InternalButton, {\n    onClick: () => setColumnFilteringText('')\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText)))), React.createElement(\"ul\", {\n    className: getClassName('option-list'),\n    \"aria-describedby\": descriptionId,\n    \"aria-labelledby\": titleId,\n    role: \"list\"\n  }, React.createElement(DndArea, {\n    items: sortedAndFilteredOptions.map(data => ({\n      id: data.id,\n      label: data.label,\n      data\n    })),\n    onItemsChange: items => onChange(items.map(({\n      id,\n      data\n    }) => ({\n      id,\n      visible: data.visible\n    }))),\n    disableReorder: columnFilteringText.trim().length > 0,\n    renderItem: ({\n      ref,\n      item,\n      isSorting,\n      isActive,\n      style,\n      className,\n      dragHandleProps\n    }) => {\n      className = clsx(className, getOptionClassName(), isSorting && styles.sorting);\n      const content = React.createElement(ContentDisplayOption, {\n        ref: ref,\n        option: item.data,\n        onToggle: onToggle,\n        dragHandleProps: dragHandleProps\n      });\n      return isActive ? content : React.createElement(\"li\", {\n        className: className,\n        style: style\n      }, content);\n    },\n    i18nStrings: {\n      liveAnnouncementDndStarted: i18n('contentDisplayPreference.liveAnnouncementDndStarted', liveAnnouncementDndStarted, format => (position, total) => format({\n        position,\n        total\n      })),\n      liveAnnouncementDndItemReordered: i18n('contentDisplayPreference.liveAnnouncementDndItemReordered', liveAnnouncementDndItemReordered, format => (initialPosition, currentPosition, total) => format({\n        currentPosition,\n        total,\n        isInitialPosition: `${initialPosition === currentPosition}`\n      })),\n      liveAnnouncementDndItemCommitted: i18n('contentDisplayPreference.liveAnnouncementDndItemCommitted', liveAnnouncementDndItemCommitted, format => (initialPosition, finalPosition, total) => format({\n        initialPosition,\n        finalPosition,\n        total,\n        isInitialPosition: `${initialPosition === finalPosition}`\n      })),\n      liveAnnouncementDndDiscarded: i18n('contentDisplayPreference.liveAnnouncementDndDiscarded', liveAnnouncementDndDiscarded),\n      dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n      dragHandleAriaDescription: i18n('contentDisplayPreference.dragHandleAriaDescription', dragHandleAriaDescription)\n    }\n  })));\n}","map":{"version":3,"names":["React","useMemo","useState","clsx","InternalBox","InternalButton","useInternalI18n","DndArea","useUniqueId","InternalSpaceBetween","InternalTextFilter","getAnalyticsInnerContextAttribute","ContentDisplayOption","getClassName","getOptionClassName","getFilteredOptions","getSortedOptions","styles","componentPrefix","suffix","ContentDisplayPreference","title","description","options","value","map","id","visible","onChange","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","dragHandleAriaDescription","dragHandleAriaLabel","enableColumnFiltering","i18nStrings","idPrefix","i18n","columnFilteringText","setColumnFilteringText","titleId","descriptionId","sortedOptions","sortedAndFilteredOptions","sorted","contentDisplay","filtered","onToggle","option","createElement","Object","assign","className","filteringText","filteringPlaceholder","columnFilteringPlaceholder","filteringAriaLabel","columnFilteringAriaLabel","filteringClearAriaLabel","columnFilteringClearFilterText","detail","countText","columnFilteringCountText","length","undefined","format","count","size","alignItems","margin","top","columnFilteringNoMatchText","onClick","role","items","data","label","onItemsChange","disableReorder","trim","renderItem","ref","item","isSorting","isActive","style","dragHandleProps","sorting","content","position","total","initialPosition","currentPosition","isInitialPosition","finalPosition"],"sources":["C:\\Users\\tanne\\Desktop\\Bright Path Analytics\\Education-Planning-Assistant-App\\frontend\\node_modules\\src\\collection-preferences\\content-display\\index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport clsx from 'clsx';\n\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport { DndArea } from '../../internal/components/dnd-area';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport { CollectionPreferencesProps } from '../interfaces';\nimport ContentDisplayOption, { getClassName as getOptionClassName } from './content-display-option';\nimport { getFilteredOptions, getSortedOptions, OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display';\n\nconst getClassName = (suffix: string) => styles[`${componentPrefix}-${suffix}`];\n\ninterface ContentDisplayPreferenceProps extends CollectionPreferencesProps.ContentDisplayPreference {\n  onChange: (value: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>) => void;\n  value?: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}\n\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({ id }) => ({\n    id,\n    visible: true,\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings,\n}: ContentDisplayPreferenceProps) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({ options, contentDisplay: value });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n\n  const onToggle = (option: OptionWithVisibility) => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({ id, visible }) => ({ id, visible: id === option.id ? !option.visible : visible })));\n  };\n\n  return (\n    <div className={styles[componentPrefix]} {...getAnalyticsInnerContextAttribute('contentDisplay')}>\n      <h3 className={getClassName('title')} id={titleId}>\n        {i18n('contentDisplayPreference.title', title)}\n      </h3>\n      <p className={getClassName('description')} id={descriptionId}>\n        {i18n('contentDisplayPreference.description', description)}\n      </p>\n\n      {/* Filter input */}\n      {enableColumnFiltering && (\n        <div className={getClassName('text-filter')}>\n          <InternalTextFilter\n            filteringText={columnFilteringText}\n            filteringPlaceholder={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringPlaceholder',\n              i18nStrings?.columnFilteringPlaceholder\n            )}\n            filteringAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringAriaLabel',\n              i18nStrings?.columnFilteringAriaLabel\n            )}\n            filteringClearAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n              i18nStrings?.columnFilteringClearFilterText\n            )}\n            onChange={({ detail }) => setColumnFilteringText(detail.filteringText)}\n            countText={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringCountText',\n              i18nStrings?.columnFilteringCountText\n                ? i18nStrings?.columnFilteringCountText(sortedAndFilteredOptions.length)\n                : undefined,\n              format => format({ count: sortedAndFilteredOptions.length })\n            )}\n          />\n        </div>\n      )}\n\n      {/* No match */}\n      {sortedAndFilteredOptions.length === 0 && (\n        <div className={getClassName('no-match')}>\n          <InternalSpaceBetween size=\"s\" alignItems=\"center\">\n            <InternalBox margin={{ top: 'm' }}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringNoMatchText',\n                i18nStrings?.columnFilteringNoMatchText\n              )}\n            </InternalBox>\n            <InternalButton onClick={() => setColumnFilteringText('')}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n                i18nStrings?.columnFilteringClearFilterText\n              )}\n            </InternalButton>\n          </InternalSpaceBetween>\n        </div>\n      )}\n\n      {/* Use explicit list role to work around Safari not announcing lists as such when list-style is set to none.\n            See https://bugs.webkit.org/show_bug.cgi?id=170179 */}\n      <ul\n        className={getClassName('option-list')}\n        aria-describedby={descriptionId}\n        aria-labelledby={titleId}\n        role=\"list\"\n      >\n        <DndArea\n          items={sortedAndFilteredOptions.map(data => ({ id: data.id, label: data.label, data }))}\n          onItemsChange={items => onChange(items.map(({ id, data }) => ({ id, visible: data.visible })))}\n          disableReorder={columnFilteringText.trim().length > 0}\n          renderItem={({ ref, item, isSorting, isActive, style, className, dragHandleProps }) => {\n            className = clsx(className, getOptionClassName(), isSorting && styles.sorting);\n            const content = (\n              <ContentDisplayOption\n                ref={ref}\n                option={item.data}\n                onToggle={onToggle}\n                dragHandleProps={dragHandleProps}\n              />\n            );\n            return isActive ? (\n              content\n            ) : (\n              <li className={className} style={style}>\n                {content}\n              </li>\n            );\n          }}\n          i18nStrings={{\n            liveAnnouncementDndStarted: i18n(\n              'contentDisplayPreference.liveAnnouncementDndStarted',\n              liveAnnouncementDndStarted,\n              format => (position, total) => format({ position, total })\n            ),\n            liveAnnouncementDndItemReordered: i18n(\n              'contentDisplayPreference.liveAnnouncementDndItemReordered',\n              liveAnnouncementDndItemReordered,\n              format => (initialPosition, currentPosition, total) =>\n                format({ currentPosition, total, isInitialPosition: `${initialPosition === currentPosition}` })\n            ),\n            liveAnnouncementDndItemCommitted: i18n(\n              'contentDisplayPreference.liveAnnouncementDndItemCommitted',\n              liveAnnouncementDndItemCommitted,\n              format => (initialPosition, finalPosition, total) =>\n                format({\n                  initialPosition,\n                  finalPosition,\n                  total,\n                  isInitialPosition: `${initialPosition === finalPosition}`,\n                })\n            ),\n            liveAnnouncementDndDiscarded: i18n(\n              'contentDisplayPreference.liveAnnouncementDndDiscarded',\n              liveAnnouncementDndDiscarded\n            ),\n            dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n            dragHandleAriaDescription: i18n(\n              'contentDisplayPreference.dragHandleAriaDescription',\n              dragHandleAriaDescription\n            ),\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}